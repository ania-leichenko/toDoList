{"version":3,"sources":["components/Todo.js","components/TodoForm.js","redux/todoSlice.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["ToDo","todo","removeTask","readyTask","index","draggableId","id","provided","className","ref","innerRef","draggableProps","dragHandleProps","complete","task","onClick","ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","todos","localStorage","getItem","JSON","parse","todoSlice","createSlice","name","initialState","reducers","state","action","payload","newItem","Math","random","toString","substr","setItem","stringify","console","log","filter","map","setTodos","actions","App","dispatch","useDispatch","useSelector","removeTaskHandler","readyTaskHandler","onDragEnd","result","destination","items","Array","from","splice","source","reorderedItem","droppableId","droppableProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b76be015.chunk.js","sourcesContent":["import { Draggable } from 'react-beautiful-dnd';\r\n\r\nfunction ToDo({ todo, removeTask, readyTask, index }) {\r\n \r\n  return (\r\n    <Draggable key={todo.id} draggableId={todo.id} index={index}>\r\n      {(provided) => (\r\n        <div className=\"item-todo\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n          <div className={todo.complete ? \"item-text strike\" : \"item-text\"}>\r\n            {todo.task}\r\n          </div>\r\n          <div\r\n            className=\"item-todo__btn item-ready\"\r\n            onClick={() => readyTask(todo.id)}\r\n          >\r\n            <div>✓</div> \r\n          </div>\r\n          <div\r\n            className=\"item-todo__btn item-delete\"\r\n            onClick={() => removeTask(todo.id)}\r\n          >\r\n            <div>X</div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n    );\r\n}\r\n\r\nexport default ToDo;\r\n","import { useState } from \"react\";\r\n\r\nfunction ToDoForm({ addTask }) {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setUserInput(e.currentTarget.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addTask(userInput);\r\n    setUserInput(\"\");\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        value={userInput}\r\n        type=\"text\"\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyPress}\r\n        placeholder=\"Введите значение...\"\r\n      />\r\n      <button>Сохранить</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ToDoForm;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nlet todos = localStorage.getItem(\"state.todos\");\r\n\r\ntodos = JSON.parse(todos);\r\nif(!todos) {\r\n  todos = []\r\n}\r\n\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState: {\r\n    todos,\r\n  },\r\n  reducers: {\r\n    addTask: (state, action) => {\r\n      if (action.payload) {\r\n        const newItem = {\r\n          id: Math.random().toString(36).substr(2, 9),\r\n          task: action.payload,\r\n          complete: false,\r\n        };\r\n        state.todos = [...state.todos, newItem];\r\n        localStorage.setItem(\"state.todos\", JSON.stringify(state.todos));\r\n      }\r\n    },\r\n    removeTask: (state, action) => {\r\n      console.log(action);\r\n      if (action.payload) {\r\n        state.todos = [\r\n          ...state.todos.filter((todo) => todo.id !== action.payload),\r\n        ];\r\n      }\r\n      localStorage.setItem(\"state.todos\", JSON.stringify(state.todos));\r\n    },\r\n    readyTask: (state, action) => {\r\n      if (action.payload) {\r\n        state.todos = [\r\n          ...state.todos.map((todo) =>\r\n            todo.id === action.payload\r\n              ? { ...todo, complete: !todo.complete }\r\n              : { ...todo }\r\n          ),\r\n        ];\r\n      }\r\n      localStorage.setItem(\"state.todos\", JSON.stringify(state.todos));\r\n    },\r\n    setTodos: (state, action) => {\r\n      state.todos = action.payload\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTask, removeTask, readyTask, setTodos } = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;","import { useSelector, useDispatch } from \"react-redux\";\r\nimport ToDo from \"./components/Todo\";\r\nimport ToDoForm from \"./components/TodoForm\";\r\nimport { addTask, removeTask, readyTask, setTodos } from \"./redux/todoSlice\";\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const todos = useSelector((state) => state.todo.todos);\r\n\r\n  const addTaskHandler = (userInput) => {\r\n    dispatch(addTask(userInput));\r\n  };\r\n\r\n  const removeTaskHandler = (id) => {\r\n    dispatch(removeTask(id));\r\n  };\r\n\r\n  const readyTaskHandler = (id) => {\r\n    dispatch(readyTask(id));\r\n  };\r\n\r\n  function handleOnDragEnd(result) {\r\n    if (!result.destination) return;\r\n\r\n    const items = Array.from(todos);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    dispatch(setTodos(items));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>To do: </h1>\r\n      </header>\r\n      <ToDoForm addTask={addTaskHandler} />\r\n      <DragDropContext onDragEnd={handleOnDragEnd}>\r\n        <Droppable droppableId=\"characters\">\r\n          {(provided) => (\r\n          <div className=\"todo-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n            {todos.map((todo, index) => (\r\n                <ToDo\r\n                  todo={todo}\r\n                  key={todo.id}\r\n                  index={index}\r\n                  removeTask={removeTaskHandler}\r\n                  readyTask={readyTaskHandler}\r\n                />\r\n              ))}\r\n              {provided.placeholder}\r\n          </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"./todoSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todo: todoReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}